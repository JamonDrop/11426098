#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef char string10[11];

struct list 
{
	int x;
	int y;
	struct list *pNext;
};
	
typedef struct list listType;
typedef listType *listArray[4];

/* GLOBAL VARIABLES */
listArray F, A, tailF, tailA;
int over = 0;

int isValid(string10 coord) /* CHECKS INPUT IF IT'S A VLAID COORDINATE */
{
	int len;
	
	len = strlen(coord);
	if(len != 3)
		printf("Wrong Input\n\n");
	else
	{	 
	   if( isdigit(coord[0]) && isdigit(coord[2]))
			return 1;
	}
	return 0;
}

int checkFree(int x1, int y1)  
{
	listType *Temp; 
	int Found = 0;
	
	Temp = F[x1-1];
	while(Temp && !Found)
	{
		if (Temp->x == x1 && Temp->y == y1)
			Found = 1;
	  	Temp = Temp->pNext;
	}
	return Found;
}

int changetoInt (string10 coord, int *x, int *y) /*SYNTAX IS ALWAYS CORRECT #-#*/
{
	char *token;
	token = strtok (coord, "-");
	*x = atoi(token);
	token = strtok (NULL, "-");
	*y = atoi(token);
	
	if (*x < 1 || *x > 4 || *y < 1 || *y > 4)
	{
		printf("Error: coordinates must be integers from 1 to 4.\n\n");
		return 0;
	}
	else return 1;
}

void NextMove()                       /*Gets uno dos tres quatro?*/
{
	string10 coord;
	int x = 0, y = 0, turn = 1,flag = 0;
	
  	do
	{                                     /*repeats getting iput while free != NULL*/
		if(turn == 5)                     
		   turn = 1;
		
		printf("\n\nCoordinates (#-#): ");   
		gets(coord); 
		
		if(!strcmp(coord,"EXIT"))        /*Exiting the program*/
	    {
			  printf("Thank You for playing!\n");
			  getch();
			  exit(1);
		}
		
		if (isValid(coord) &&  /*Checks if input of the user is valid (n-n)*/
			changetoInt(coord,&x,&y) /*It will change the string input to int(s)*/ )
		{
			flag = checkFree(x,y);
			if (flag)
				printf("FOUND\n");
			else printf("NOT FOUND\n");
		}
		
		if (F[0] == NULL && F[1] == NULL && F[2] == NULL && F[3] == NULL)
			over = 1;
	
	} while ( !over );
}

void InitializeF () /* INITIALIZE X AND Y COORDS OF F LIST */
{
	int i, j;
	listType *pRunner = NULL, *pTrail = NULL;
	
	for (i = 0; i < 4; i ++)
	{
		F[i] = malloc(sizeof(listType));
		F[i]->pNext = NULL;
		pRunner = F[i];
		pTrail = pRunner;
		for (j = 0; j < 4; j ++)
		{
			pRunner->x = i + 1;
			pRunner->y = j + 1;
			if (j == 3)
				pRunner->pNext = NULL; /* REACHED THE END OF THE LIST */
			else
			{
				/* CREATE ANOTHER NODE */
				pRunner = malloc(sizeof(listType));
				pTrail->pNext = pRunner;
				pTrail = pRunner;
			}
		}
	}
}

void displayF ()
{
	int i;
	listType *pTemp = NULL;
	
	for (i = 0; i < 4; i ++)
	{
		pTemp = F[i];
		while (pTemp)
		{
			printf("(%d,%d)  ", pTemp->x, pTemp->y);
			pTemp = pTemp->pNext;
		}
		printf("\n");
	}
}

void InitializeList()
{
	int i;
	
	/* FREE */
	for (i = 0; i < 4; i ++)
	{
		F[i] = NULL;
		tailF[i] = F[i];
	}
	
	/* UNO DOS TRES QUATRO */
	for (i = 0; i < 4; i ++)
	{
		A[i] = NULL;
		tailA[i] = A[i];
	}
	
	InitializeF(); /* INITIALIZE ALL VALUES OF X AND Y TO FREE LIST */
}

void startUp ()
{
	printf("DISCTRU Machine Project: 4x4 Sudoku\n");
	printf("Submitted by Consuelo, Magpale, Reccion\n");
	printf("Section S17\n\n");
}

int main ()
{
	startUp();
	InitializeList();
	displayF();
	NextMove();
	getch ();
	return 0;
}			

/*Code for table*/
void dispTable ()
{
	printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",201,205,205,205,203,205,205,205,203,205,205,205,203,205,205,205,187);
	printf("%c   %c   %c   %c   %c\n",186,186,186,186,186);
	printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",204,205,205,205,206,205,205,205,206,205,205,205,206,205,205,205,185);
	printf("%c   %c   %c   %c   %c\n",186,186,186,186,186);
	printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",204,205,205,205,206,205,205,205,206,205,205,205,206,205,205,205,185);
	printf("%c   %c   %c   %c   %c\n",186,186,186,186,186);
	printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",204,205,205,205,206,205,205,205,206,205,205,205,206,205,205,205,185);
	printf("%c   %c   %c   %c   %c\n",186,186,186,186,186);
	printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",200,205,205,205,202,205,205,205,202,205,205,205,202,205,205,205,188);
}
