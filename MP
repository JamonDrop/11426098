#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

typedef char string10[11];

struct list 
{
	int x;
	int y;
	int num;
	struct list *pNext;
};
	
typedef struct list listType;
typedef listType *listArray[4];

/* GLOBAL VARIABLES */
listArray F, UDTQ, displayList, tailUDTQ, V;
listType *A, *B, *C, *D;
int over = 0, result = NULL;

listType * FreeList(listType *pList)
{
	listType *pTrail = pList;
	
	while (pList != NULL)
	{
		pList = pList->pNext;
		free(pTrail);
		pTrail = pList;
	}
	return pList;
}

void FreeAll ()
{
	int i;
	for(i = 0; i < 4; i ++)
	{
		F[i] = FreeList(F[i]);
		UDTQ[i] = FreeList(UDTQ[i]);
		displayList[i] = FreeList(displayList[i]);
		tailUDTQ[i] = FreeList(tailUDTQ[i]);
		V[i] = FreeList(V[i]);
	}
	A = FreeList(A);
	B = FreeList(B);
	C = FreeList(C);
	D = FreeList(D);
}

void displayTable ()
{
	int i;
	int cntV=0;
	int cntH=0;
	listType *pTemp = NULL;
	
	printf("\n");
	for (i = 0; i < 4; i ++)
	{
		pTemp = displayList[i];
		while (pTemp)
		{ 
			if (pTemp->num == 0)
			{
				if(cntV == 0 && cntH == 0)
				{
					printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",201,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,187);
					printf("%c   S  U  D  O  K  U    %c\n",186,186);
					printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",204,205,205,205,205,205,203,205,205,205,205,205,203,205,205,205,205,205,203,205,205,205,205,205,185);					
					cntV++;
				}
				if(cntV == 1 && (cntH == 0|| cntH == 1 || cntH ==  2))
				{
					printf("%c(%d,%d)",186, pTemp->x, pTemp->y);
					cntV++;
				}
				else if(cntV == 2 && (cntH == 0|| cntH == 1 || cntH == 2))
				{
					printf("%c(%d,%d)",186, pTemp->x, pTemp->y);
					cntV++;
				}
				else if(cntV == 3 && (cntH == 0|| cntH == 1 || cntH == 2))
				{
					printf("%c(%d,%d)",186, pTemp->x, pTemp->y);
					cntV++;
				}
				else if(cntV == 4 && (cntH == 0|| cntH == 1 || cntH == 2))
				{
					printf("%c(%d,%d)%c\n",186, pTemp->x, pTemp->y,186);
					cntV++;
					cntH++;
					printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",204,205,205,205,205,205,206,205,205,205,205,205,206,205,205,205,205,205,206,205,205,205,205,205,185);
					if(cntV == 5)
				 		cntV = 1;
				}
				else if(cntV == 1 && cntH == 3)
				{
					printf("%c(%d,%d)",186, pTemp->x, pTemp->y);
					cntV++;
				}
				else if(cntV == 2 && cntH == 3)
				{
					printf("%c(%d,%d)",186, pTemp->x, pTemp->y);
					cntV++;
				}
				else if(cntV == 3 && cntH == 3)
				{
					printf("%c(%d,%d)",186, pTemp->x, pTemp->y);
					cntV++;
				}
				else if((cntV == 4) && cntH == 3)
				{
					printf("%c(%d,%d)%c\n",186, pTemp->x, pTemp->y,186);
					printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",200,205,205,205,205,205,202,205,205,205,205,205,202,205,205,205,205,205,202,205,205,205,205,205,188);
			
				}
				
			}
			else if (pTemp->num!=0)
			{
				if(cntV == 0 && cntH == 0)
				{
					printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\n",201,205,205,205,205,205,203,205,205,205,205,205,203,205,205,205,205,205,203,205,205,205,205,205,187);
					cntV++;
				}
				if(cntV == 1 && (cntH == 0|| cntH == 1 || cntH ==  2))
				{
					printf("%c  %d  ",186, pTemp->num);
					cntV++;
				}
				else if(cntV == 2 && (cntH == 0|| cntH == 1 || cntH == 2))
				{
					printf("%c  %d  ",186, pTemp->num);
					cntV++;
				}
				else if(cntV == 3 && (cntH == 0|| cntH == 1 || cntH == 2))
				{
					printf("%c  %d  ",186, pTemp->num);
					cntV++;
				}
				else if(cntV == 4 && (cntH == 0|| cntH == 1 || cntH == 2))
				{
					printf("%c  %d  %c\n",186, pTemp->num,186);
					cntV++;
					cntH++;
					printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",204,205,205,205,205,205,206,205,205,205,205,205,206,205,205,205,205,205,206,205,205,205,205,205,185);
					if(cntV == 5)
				 		cntV = 1;
				}
				else if(cntV == 1 && cntH == 3)
				{
					printf("%c  %d  ",186, pTemp->num);
					cntV++;
				}
				else if(cntV == 2 && cntH == 3)
				{
					printf("%c  %d  ",186, pTemp->num);
					cntV++;
				}
				else if(cntV == 3 && cntH == 3)
				{
					printf("%c  %d  ",186, pTemp->num);
					cntV++;
				}
				else if((cntV == 4) && cntH == 3)
				{
					printf("%c  %d  %c\n",186, pTemp->num,186);
					printf("%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c",200,205,205,205,205,205,202,205,205,205,205,205,202,205,205,205,205,205,202,205,205,205,205,205,188);
			
				}
				
			} 
			pTemp = pTemp->pNext;
			
		}
		printf("\n");
	}
}

int isValid(string10 coord) /* CHECKS INPUT IF IT'S A VLAID COORDINATE */
{
	int len;
	
	len = strlen(coord);
	if(len != 3)
		printf("Wrong Input\n\n");
	else
	{
		if( isdigit(coord[0]) && isdigit(coord[2]))
			return 1;
	}
	return 0;
}

int checkFree(int x1, int y1)  /*CHECKS IF INPUT IS AN ELEMENT OF FREE*/
{
	listType *Temp; 
	int Found = 0;
	
	Temp = F[x1-1];
	while(Temp && !Found)
	{
		if (Temp->x == x1 && Temp->y == y1)
			Found = 1;
	  	Temp = Temp->pNext;
	}
	return Found;
}

int changetoInt (string10 coord, int *x, int *y) /*SYNTAX IS ALWAYS CORRECT #-#*/
{
	char *token;
	token = strtok (coord, "-");
	*x = atoi(token);
	token = strtok (NULL, "-");
	*y = atoi(token);
	
	if (*x < 1 || *x > 4 || *y < 1 || *y > 4)
	{
		printf("Error: coordinates must be integers from 1 to 4.\n\n");
		return 0;
	}
	else return 1;
}

void AddasNodeinUDTQ(int x1, int y1,int turn)
{
	listType *temp;   
	temp=malloc(sizeof(listType));
	temp->pNext=NULL;
	temp->x=x1;
	temp->y=y1;
	if(UDTQ[turn-1]==NULL) /* IF THERE'S NO ELEMENT YET */
	{
		UDTQ[turn-1]=temp;
		tailUDTQ[turn-1]=temp;
	}
	else
	{
		tailUDTQ[turn-1]->pNext=temp;
		tailUDTQ[turn-1]=temp;
	}
}

void DeleteFromFree(int x1,int y1)      /*deletes the node containing users input from free*/
{
	listType *current,*trail;	
	int found=0;
	current=F[x1-1];
	trail=current;
	while(current&&!found)
	{
		if (F[x1-1]->x==x1&&F[x1-1]->y==y1)
		{
			found=1;
			F[x1-1]=current->pNext;
			free(current);
		}
		else 
		{
			trail=current;
			current=current->pNext;
			if(current->x==x1&&current->y==y1)
			{
				found=1;
				trail->pNext=current->pNext;
				free(current);
			}
	    }
	}
}

void changeDisplayList (int turn, int x1, int y1)
{
	int index = x1;
	listType *pTemp = displayList[index-1];
	
	while (pTemp)
	{
		if (pTemp->y == y1)
			pTemp->num = turn;
		pTemp = pTemp->pNext;
	}
}

void NextMove()                       /*Gets uno dos tres quatro?*/
{
	string10 coord;
	int x = 0, y = 0, turn = 1, flag = 0, i = 0;
	
  	do
	{                                     /*repeats getting iput while free != NULL*/
		displayTable();
		
		if(turn == 5)                     
		   turn = 1;
		
		printf("\nCoordinates (#-#): ");   
		gets(coord); 
		
		if(!strcmp(coord,"EXIT"))        /*Exiting the program*/
	    {
			printf("Thank You for playing!\n");
			FreeAll();
			getch();
			exit(1);
		}
		
		if (isValid(coord) &&  /*Checks if input of the user is valid (n-n)*/
			changetoInt(coord,&x,&y) /*It will change the string input to int(s)*/ )
		{
			flag = checkFree(x,y);
			if (flag)
			{
			      AddasNodeinUDTQ(x,y,turn); /*Adds the coordinates to uno dos tres Quatro*/
			      DeleteFromFree(x,y); /*deletes the node containing users input from free*/
			      changeDisplayList(turn,x,y);
			      turn++;
			}
			else printf("Error: Coordinate entered is not available.\n");
		}
		
		if (F[0] == NULL && F[1] == NULL && F[2] == NULL && F[3] == NULL)
		{
			over = 1;
			displayTable();
		}
	
	} while ( !over );
	
	for (i = 0; i < 4; i ++)
		tailUDTQ[i] = NULL;
}

int Match(listType *posns,listType *patn)
{
	int match=0;
	listType *patntemp = patn;
	listType *posnstemp;
	
	while(patntemp)
	{
		posnstemp=posns;
		while(posnstemp)
		{
			if(patntemp->x==posnstemp->x&&patntemp->y==posnstemp->y)
				match++;
			posnstemp=posnstemp->pNext;
		}
		patntemp=patntemp->pNext;
	}
	
	return match;
}

int Check (listType *posns)
{
	int product = 1;
	int i = 0, isWrong = 0;
	if (Match(posns, A) == 1 && Match(posns, B) == 1 && Match(posns,C) == 1 && Match(posns, D) == 1)
	{
		while (i < 4 && !isWrong) /* HORIZONTAL AND VERTICAL */
		{
			if (Match(posns, displayList[i]) != 1 || Match(posns, V[i]) != 1)
				isWrong = 1;
			i ++;
		}
		if (isWrong)
			product = 0;
	}
	else product = 0;
	return product;
}

void EndGame ()
{
	int i = 0, isWrong = 0;
	while (i < 4 && !isWrong)
	{
		if (!Check(UDTQ[i]))
			isWrong = 1;
		i ++;
	}
	
	if (!isWrong)
		result = 1;
	else result = 0;
	
	if (result)
		printf("\n\nCONGRATULATIONS!\nYOU WON!\n");
	else printf("\n\nSORRY, YOU LOSE.\n");
}

void InitializeVertical (int num)
{
	int i, x1, y1;
	listType *pRunner, *pTrail;
	
	pRunner = malloc(sizeof(listType));
	pTrail = pRunner;
	
	switch (num)
	{
		case 0: V[0] = pRunner; 
					x1 = 1;
					y1 = 1; break;
		case 1: V[1] = pRunner;  
					x1 = 1;
					y1 = 2; break;
		case 2: V[2] = pRunner;  
					x1 = 1;
					y1 = 3; break;
		case 3: V[3] = pRunner;  
					x1 = 1;
					y1 = 4; break;
	}
	
	for(i = 0; i < 4; i ++)
	{
		pRunner->y = y1;
		pRunner->x = x1 + i;
		
		if (i == 3)
			pRunner->pNext = NULL;
		else
		{
			pRunner = malloc(sizeof(listType));
			pTrail->pNext = pRunner;
			pTrail = pRunner;
		}
	}
	
}

void InitializeABCD(int num)
{
	int i, x1, y1;
	listType *pRunner, *pTrail;
	
	pRunner = malloc(sizeof(listType));
	pTrail = pRunner;
	
	switch (num)
	{
		case 0: A = pRunner; 
					x1 = 1;
					y1 = 1; break;
		case 1: B = pRunner;  
					x1 = 1;
					y1 = 3; break;
		case 2: C = pRunner;  
					x1 = 3;
					y1 = 1; break;
		case 3: D = pRunner;  
					x1 = 3;
					y1 = 3; break;
	}
	
	for (i = 0; i < 4; i ++)
	{
		switch (i)
		{
			case 0: pRunner->x = x1;
					pRunner->y = y1; 
					break;
			case 1: pRunner->x = x1;
					pRunner->y = y1 + 1; 
					break;
			case 2: pRunner->x = x1 + 1;
					pRunner->y = y1; 
					break;
			case 3: pRunner->x = x1 + 1;
					pRunner->y = y1 + 1; 
					break;
		}
		if (i == 3)
			pRunner->pNext = NULL;
		else
		{
			pRunner = malloc(sizeof(listType));
			pTrail->pNext = pRunner;
			pTrail = pRunner;
		}
	}
}

void InitializeF () /* INITIALIZE X AND Y COORDS OF F LIST */
{
	int i, j;
	listType *pRunner = NULL, *pTrail = NULL;
	
	for (i = 0; i < 4; i ++)
	{
		F[i] = malloc(sizeof(listType));
		F[i]->pNext = NULL;
		pRunner = F[i];
		pTrail = pRunner;
		for (j = 0; j < 4; j ++)
		{
			pRunner->x = i + 1;
			pRunner->y = j + 1;
			pRunner->num = 0;
			if (j == 3)
				pRunner->pNext = NULL; /* REACHED THE END OF THE LIST */
			else
			{
				/* CREATE ANOTHER NODE */
				pRunner = malloc(sizeof(listType));
				pTrail->pNext = pRunner;
				pTrail = pRunner;
			}
		}
	}
}

void InitializeDisplayList () /* INITIALIZE X AND Y COORDS OF DISPLAY LIST */
{
	int i, j;
	listType *pRunner = NULL, *pTrail = NULL;
	
	for (i = 0; i < 4; i ++)
	{
		displayList[i] = malloc(sizeof(listType));
		displayList[i]->pNext = NULL;
		pRunner = displayList[i];
		pTrail = pRunner;
		for (j = 0; j < 4; j ++)
		{
			pRunner->x = i + 1;
			pRunner->y = j + 1;
			pRunner->num = 0;
			if (j == 3)
				pRunner->pNext = NULL; /* REACHED THE END OF THE LIST */
			else
			{
				/* CREATE ANOTHER NODE */
				pRunner = malloc(sizeof(listType));
				pTrail->pNext = pRunner;
				pTrail = pRunner;
			}
		}
	}
}

void InitializeList()
{
	int i;
	
	for (i = 0; i < 4; i ++)
	{
		F[i] = NULL;	/* FREE */
		UDTQ[i] = NULL;	/* UNO DOS TRES QUATRO */
		tailUDTQ[i] = UDTQ[i];
		displayList[i] = NULL;	/* DISPLAYLIST */
		V[i] = NULL; /* VERTICAL */
	}
	
	A = NULL;
	B = NULL;
	C = NULL;
	D = NULL;

	InitializeF(); /* INITIALIZE ALL VALUES OF X AND Y TO FREE LIST */
	InitializeDisplayList(); /* INITIALIZE ALL VALUES OF X AND Y TO DISPLAY LIST */
	for (i = 0; i < 4; i ++)
	{
		InitializeABCD(i);
		InitializeVertical(i);
	}
}

void startUp ()
{
	printf("Submitted by Consuelo, Magpale, Reccion\n");
	printf("Section S17\n\n");
}

int main ()
{
	startUp();
	InitializeList();
	NextMove();
	EndGame();
	FreeAll();
	getch ();
	return 0;
}
